within ;
package TanksPkg
     partial model ThreeTanksNoInput
        parameter Modelica.SIunits.Length a = 31.0 "1st tank's width" annotation(Evaluate=true);
        parameter Modelica.SIunits.Length b = 40.0 "2nd tank's triangular part's width" annotation(Evaluate=true);
        parameter Modelica.SIunits.Length c = 10.0 "2nd tank's rectangular part's width" annotation(Evaluate=true);
        parameter Modelica.SIunits.Length R = 40.0 "3rd tank's side's radius" annotation(Evaluate=true);
        parameter Modelica.SIunits.Length w = 5.0 "Tanks' depth" annotation(Evaluate=true);
        parameter Modelica.SIunits.Length h_max = 40.0 "Maximum height of liquid in tanks" annotation(Evaluate=true);

        parameter Modelica.SIunits.VolumeFlowRate C1 = 26.0 "1st tank's outflow rate";
        parameter Modelica.SIunits.VolumeFlowRate C2 = 26.0 "2nd tank's outflow rate";
        parameter Modelica.SIunits.VolumeFlowRate C3 = 28.0 "3rd tank's outflow rate";

        parameter Real alpha1 = 0.5 "1st tank's flow coefficient";
        parameter Real alpha2 = 0.5 "2nd tank's flow coefficient";
        parameter Real alpha3 = 0.5 "3rd tank's flow coefficient";

        parameter Modelica.SIunits.Length h10 = 20.0 "1st tank's initial value";
        parameter Modelica.SIunits.Length h20 = 20.0 "2nd tank's initial value";
        parameter Modelica.SIunits.Length h30 = 20.0 "3rd tank's initial value";

        parameter Real u_max = 20.0 "Maximum control value";

        Real h1(start=h10, fixed=true, min=0, max=h_max);
        Real h2(start=h20, fixed=true, min=0, max=h_max);
        Real h3(start=h30, fixed=true, min=0, max=h_max);

        replaceable Real u;
    equation
        der(h1)=(u - C1*(h1^alpha1))/(a*w);
        der(h2)=(C1*(h1^alpha1) - C2*(h2^alpha2))/(c*w + h2*b*w/h_max);
        der(h3)=(C2*(h2^alpha2) - C3*(h3^alpha3))/(w*sqrt(R^2 - (R - h3)^2));
    end ThreeTanksNoInput;

    model ThreeTanks
        extends ThreeTanksNoInput(redeclare Modelica.Blocks.Interfaces.RealInput u);
    end ThreeTanks;

    model ThreeTanksInit
        extends ThreeTanks(h1(fixed=false), h2(fixed=false), h3(fixed=false));
    initial equation
        der(h1) = 0;
        der(h2) = 0;
        der(h3) = 0;
    end ThreeTanksInit;

    model ThreeTanksCostateEquations
        extends ThreeTanksNoInput(u(fixed=true, stateSelect=StateSelect.never));

        parameter Real theta = 0.0;
        parameter Real phi = 0.0;

        Real psi1(start=sin(theta) * cos(phi), fixed=true);
        Real psi2(start=sin(theta) * sin(phi), fixed=true);
        Real psi3(start=cos(theta), fixed=true);
    equation
         u = u_max * (sign(psi1) + abs(sign(psi1)))/2;
        der(psi1) = C1*psi1/(2*a*w*sqrt(h1)) - C1*psi2/(2*sqrt(h1)*(c*w + h2*b*w/h_max));
        der(psi2) = -psi2*((b*(C1*sqrt(h1) - C2*sqrt(h2)))/(c*h_max + h2*b) - C2/(2*sqrt(h2)))/(c*w + h2*b*w/h_max) - psi3/(w*sqrt(h3*(2*R - h3)));
        der(psi3) = -psi3*C3*(3*R - 2*h3) / (w*h3*sqrt(2*R - h3) * (2*R - h3));
    end ThreeTanksCostateEquations;

    optimization three_tanks_time_optimal(objective=finalTime, startTime=0,
                                          finalTime(free=true,initialGuess=50))
        extends ThreeTanks(u(free=true, initialGuess=20.0));

        parameter Real h1_final = 5.0;
        parameter Real h2_final = 5.0;
        parameter Real h3_final = 5.0;

        constraint
            h1(finalTime)=h1_final;
            h2(finalTime)=h2_final;
            h3(finalTime)=h3_final;
            finalTime >= 0;
            h1 <= h_max;
            h1 >= 0;
            h2 <= h_max;
            h2 >= 0;
            h3 <= h_max;
            h3 >= 0.00001;
            u>=0;
            u<=u_max;
    end three_tanks_time_optimal;
end TanksPkg;